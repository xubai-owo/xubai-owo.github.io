{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "Xubai's Blog", "subTitle": "\u8bb0\u5f55\u4e00\u4e9b\u65e5\u5e38\u7684\u6298\u817e", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Hello World!.html", "labels": ["test"], "postTitle": "Hello World!", "postUrl": "post/Hello%20World%21.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/1", "commentNum": 0, "wordCount": 13, "description": "# \u7b2c\u4e00\u7bc7\u6587\u7ae0\r\n\u6d4b\u8bd5\u4e00\u4e0b\u3002", "top": 0, "createdAt": 1730111608, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-10-28", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/cang-shu-ru-fa-(Hamster) -zi-yong-jiao-ben.html", "labels": ["\u4ed3\u8f93\u5165\u6cd5"], "postTitle": "\u4ed3\u8f93\u5165\u6cd5(Hamster) \u81ea\u7528\u811a\u672c", "postUrl": "post/cang-shu-ru-fa-%28Hamster%29%20-zi-yong-jiao-ben.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/2", "commentNum": 3, "wordCount": 15653, "description": "## DeepSeek\r\n> [!TIP]\r\n> \u8bf7\u5728\u811a\u672c\u4e2d\u7684\u53d8\u91cf\u529f\u80fd\u4e2d\u6dfb\u52a0 deepseek_key \u53d8\u91cf\uff0c\u503c\u4e3a DeepSeek \u7684 API Key\r\n```javascript\r\n// author: \u53d9\u767d\r\n// date: 2024-10-09\r\n// name: DeepSeek.js\r\n// \u6ce8\u610f\uff1a\u8bf7\u5728\u811a\u672c\u4e2d\u7684\u53d8\u91cf\u529f\u80fd\u4e2d\u6dfb\u52a0 deepseek_key \u53d8\u91cf\uff0c\u503c\u4e3a DeepSeek \u7684 API Key\r\n// \u5982\u679c\u60a8\u4f7f\u7528\u8f6c\u53d1\u5e73\u53f0\u7684 API \uff0c\u5219\u503c\u4e3a\u8f6c\u53d1\u5e73\u53f0\u7684 API Key, \u5e76\u4e14\u4fee\u6539BASE_URL\r\n// \u6b64\u811a\u672c\u4ec5\u517c\u5bb9openai\u683c\u5f0f(openai, deepseek, kimi\u4ee5\u53ca\u66f4\u591a\u517c\u5bb9openai\u683c\u5f0f\u7684\u90fd\u53ef\u4f7f\u7528\uff0c\u6e29\u5ea6\u9700\u8981\u6839\u636e\u5404\u5bb6ai\u81ea\u884c\u8c03\u6574)\r\n\r\n// \u4f9d\u6b21\u4e3abase_url, \u9ed8\u8ba4\u6a21\u578b\uff0c\u9ed8\u8ba4\u6e29\u5ea6\uff0c\u4e0d\u61c2\u8bf7\u52ff\u4fee\u6539\r\nconst BASE_URL = 'https://api.deepseek.com/v1/chat/completions';\r\nconst DEFAULT_MODEL = 'deepseek-chat';\r\n\r\n// \u4e0d\u540c\u4efb\u52a1\u7c7b\u578b\u7684\u63a8\u8350\u6e29\u5ea6\u503c\uff1a\u4ee3\u7801\u751f\u6210/\u6570\u5b66\u89e3\u9898 0.0, \u6570\u636e\u62bd\u53d6/\u5206\u6790 1.0, \u901a\u7528\u5bf9\u8bdd 1.3, \u7ffb\u8bd1 1.3, \u521b\u610f\u7c7b\u5199\u4f5c/\u8bd7\u6b4c\u521b\u4f5c 1.5\r\nconst DEFAULT_TEMPERATURE = 1.3;\r\n\r\nasync function deepseekDemo(question = '\u4f60\u597d', options = {}) {\r\n  const {\r\n    model = DEFAULT_MODEL,\r\n    temperature = DEFAULT_TEMPERATURE,\r\n    isShortAnswer = !question.endsWith('-')  // \u9ed8\u8ba4\u7b80\u77ed\u56de\u7b54\r\n  } = options;\r\n\r\n  // \u53ef\u81ea\u5b9a\u4e49systemPrompt\uff0c\u5728\u4f60\u7684\u95ee\u9898\u7ed3\u5c3e\u540e\u52a0-\u53f7\uff0c\u4f1a\u81ea\u52a8\u5e2e\u4f60\u8f6c\u77ed\u95ee\r\n  const systemPrompt = `\u4f60\u662f\u4e00\u4f4dAI\u52a9\u624b\uff0c\u80fd\u591f\u56de\u7b54\u7684\u4e13\u4e1a\u4ee5\u53ca\u51c6\u786e${isShortAnswer ? '\uff0c\u73b0\u5728\u8bf7\u5c3d\u91cf\u7528\u4e00\u53e5\u8bdd\u56de\u7b54\u6211\u7684\u95ee\u9898' : ''}`;\r\n\r\n  const messages = [\r\n    { role: 'system', content: systemPrompt },\r\n    { role: 'user', content: question }\r\n  ];\r\n\r\n  try {\r\n    const resp = await $http({\r\n      url: BASE_URL,\r\n      method: 'post',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${$deepseek_key}`,\r\n      },\r\n      body: { messages, model, temperature },\r\n      timeout: 30,\r\n    });\r\n\r\n    const statusCode = resp.response.statusCode;\r\n    if (statusCode !== 200) {\r\n      throw new Error(`API\u8bf7\u6c42\u5931\u8d25: HTTP\u72b6\u6001\u7801 ${statusCode}`);\r\n    }\r\n\r\n    const parsedData = JSON.parse(resp.data);\r\n    if (!parsedData.choices || parsedData.choices.length === 0) {\r\n      throw new Error('API\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u9519\u8bef: \u6ca1\u6709\u627e\u5230\u6709\u6548\u7684\u56de\u590d');\r\n    }\r\n\r\n    return parsedData.choices[0].message?.content || '';\r\n  } catch (error) {\r\n    let errorMessage = '\u672a\u77e5\u9519\u8bef';\r\n    if (error instanceof SyntaxError) {\r\n      errorMessage = 'API\u8fd4\u56de\u7684\u6570\u636e\u65e0\u6cd5\u89e3\u6790\u4e3aJSON';\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    $log(`DeepSeek API \u9519\u8bef: ${errorMessage}`);\r\n    if (error.response) {\r\n      $log(`\u54cd\u5e94\u8be6\u60c5: ${JSON.stringify(error.response)}`);\r\n    }\r\n    return `\u62b1\u6b49\uff0c\u53d1\u751f\u4e86\u9519\u8bef: ${errorMessage}`;\r\n  }\r\n}\r\n\r\nasync function output() {\r\n  const question = $searchText || $pasteboardContent || '\u4f60\u597d';\r\n  return await deepseekDemo(question);\r\n}\r\n```\r\n## Gemini\r\n> [!TIP]\r\n> \u8bf7\u5728\u811a\u672c\u4e2d\u7684\u53d8\u91cf\u529f\u80fd\u4e2d\u6dfb\u52a0 gemini_key \u53d8\u91cf\uff0c\u503c\u4e3a Gemini \u7684 API Key\r\n```js\r\n// author: \u53d9\u767d\r\n// date: 2024-10-03\r\n// name: Gemini.js\r\n// \u6ce8\u610f\uff1a\u8bf7\u5728\u811a\u672c\u4e2d\u7684\u53d8\u91cf\u529f\u80fd\u4e2d\u6dfb\u52a0 gemini_key \u53d8\u91cf\uff0c\u503c\u4e3a Gemini \u7684 API Key\r\n\r\nconst BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models';\r\nconst DEFAULT_MODEL = 'gemini-1.5-flash';\r\n\r\nasync function geminiDemo(question = '\u4f60\u597d', options = {}) {\r\n  const {\r\n    model = DEFAULT_MODEL,\r\n    isShortAnswer = question.endsWith('-')\r\n  } = options;\r\n\r\n  const systemPrompt = `\u4f60\u662f\u4e00\u4f4dAI\u52a9\u624b\uff0c\u80fd\u591f\u56de\u7b54\u7684\u4e13\u4e1a\u4ee5\u53ca\u51c6\u786e${isShortAnswer ? '\uff0c\u73b0\u5728\u8bf7\u5c3d\u91cf\u7528\u4e00\u53e5\u8bdd\u56de\u7b54\u6211\u7684\u95ee\u9898' : ''}`;\r\n\r\n  const url = `${BASE_URL}/${model}:generateContent?key=${$gemini_key}`;\r\n  const body = {\r\n    'system_instruction': {\r\n      'parts': {\r\n        'text': systemPrompt\r\n      }\r\n    },\r\n    'contents': {\r\n      'parts': {\r\n        'text': question\r\n      }\r\n    }\r\n  };\r\n\r\n  try {\r\n    const resp = await $http({\r\n      url,\r\n      method: 'post',\r\n      header: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: body,\r\n      timeout: 30,\r\n    });\r\n\r\n    const statusCode = resp.response.statusCode;\r\n    if (statusCode !== 200) {\r\n      throw new Error(`API\u8bf7\u6c42\u5931\u8d25: HTTP\u72b6\u6001\u7801 ${statusCode}`);\r\n    }\r\n\r\n    const parsedData = JSON.parse(resp.data);\r\n    if (!parsedData.candidates || parsedData.candidates.length === 0) {\r\n      throw new Error('API\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u9519\u8bef: \u6ca1\u6709\u627e\u5230\u6709\u6548\u7684\u56de\u590d');\r\n    }\r\n\r\n    return parsedData.candidates[0].content.parts[0].text || '';\r\n  } catch (error) {\r\n    let errorMessage = '\u672a\u77e5\u9519\u8bef';\r\n    if (error instanceof SyntaxError) {\r\n      errorMessage = 'API\u8fd4\u56de\u7684\u6570\u636e\u65e0\u6cd5\u89e3\u6790\u4e3aJSON';\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    $log(`Gemini API \u9519\u8bef: ${errorMessage}`);\r\n    if (error.response) {\r\n      $log(`\u54cd\u5e94\u8be6\u60c5: ${JSON.stringify(error.response)}`);\r\n    }\r\n    return `\u62b1\u6b49\uff0c\u53d1\u751f\u4e86\u9519\u8bef: ${errorMessage}`;\r\n  }\r\n}\r\n\r\nasync function output() {\r\n  const question = $searchText || $pasteboardContent || '\u4f60\u597d-';\r\n  return await geminiDemo(question);\r\n}\r\n```\r\n## Base64\u7f16\u89e3\u7801\r\n> [!TIP]\r\n> E\u9700\u8981\u7f16\u7801\u7684\u5b57\u7b26\u4e32/D\u9700\u8981\u89e3\u7801\u7684\u5b57\u7b26\u4e32\r\n```js\r\n// author: \u53d9\u767d\r\n// name: base64\u7f16\u7801\u89e3\u7801.js\r\n// date: 2024-09-25\r\n// \u4f7f\u7528\uff1aE\u9700\u8981\u7f16\u7801\u7684\u5b57\u7b26\u4e32/D\u9700\u8981\u89e3\u7801\u7684\u5b57\u7b26\u4e32\r\n\r\nfunction base64Encode(str) {\r\n  // \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a UTF-8 \u7f16\u7801\r\n  const utf8Bytes = unescape(encodeURIComponent(str));\r\n  let output = '';\r\n  let buffer = 0;\r\n  let bitsCollected = 0;\r\n\r\n  for (let byte of utf8Bytes) {\r\n    buffer = (buffer << 8) | byte.charCodeAt(0);\r\n    bitsCollected += 8;\r\n\r\n    while (bitsCollected >= 6) {\r\n      bitsCollected -= 6;\r\n      output += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='[(buffer >> bitsCollected) & 0x3F];\r\n    }\r\n  }\r\n\r\n\r\n  if (bitsCollected > 0) {\r\n    buffer <<= (6 - bitsCollected);\r\n    output += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='[(buffer & 0x3F)];\r\n    output += '='; // \u6dfb\u52a0\u586b\u5145\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction base64Decode(str) {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n  let output = '';\r\n  let buffer = 0;\r\n  let bitsCollected = 0;\r\n\r\n  for (let char of str) {\r\n    if (char === '=') break;\r\n    const charIndex = chars.indexOf(char);\r\n    if (charIndex === -1) continue; // \u5ffd\u7565\u975e\u6cd5\u5b57\u7b26\r\n\r\n    buffer = (buffer << 6) | charIndex;\r\n    bitsCollected += 6;\r\n\r\n    while (bitsCollected >= 8) {\r\n      bitsCollected -= 8;\r\n      output += String.fromCharCode((buffer >> bitsCollected) & 0xFF);\r\n    }\r\n  }\r\n\r\n  // \u5c06\u89e3\u7801\u540e\u7684\u5b57\u8282\u8f6c\u6362\u56de UTF-8\r\n  return decodeURIComponent(escape(output));\r\n}\r\n\r\nasync function output() {\r\n  const text = $searchText || $pasteboardContent\r\n  if (!text) {\r\n    return '\u8bf7\u8f93\u5165\u5185\u5bb9!';\r\n  }\r\n  if (text[0] === 'E') {\r\n    return base64Encode(text.slice(1));;\r\n  } else if (text[0] === 'D') {\r\n    return base64Decode(text.slice(1));\r\n  } else {\r\n    return '\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u6307\u4ee4';\r\n  }\r\n}\r\n```\r\n## Deeplx\r\n> [!TIP]\r\n> \u9700\u6dfb\u52a0\u53d8\u91cfdeeplx_key\r\n```js\r\n// author: \u53d9\u767d\r\n// date: 2024-09-25\r\n// name: Deeplx.js\r\n// \u6ce8\u610f: \u9700\u6dfb\u52a0\u53d8\u91cfdeeplx_key\r\n// \u4f7f\u7528\uff1a \u8981\u7ffb\u8bd1\u6210\u82f1\u6587\u6216\u4e2d\u6587\uff0c\u5728\u7ffb\u8bd1\u6587\u672c\u524d\u52a0\u201c\u4e2d/\u82f1\u201d\uff0c \u4f8b\uff1a \u4e2d\u6211\u8981\u56de\u5bb6\uff0c\u5c06\u4f1a\u7ffb\u8bd1\u6210\u82f1\u6587\r\n\r\nasync function output() {\r\n  const text = $searchText || $pasteboardContent;\r\n  if (!text) return null; // \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a\r\n\r\n  const langMap = {\r\n    '\u4e2d': 'ZH',\r\n    '\u82f1': 'EN'\r\n  };\r\n\r\n  const target = langMap[text[0]]; // \u6839\u636e\u9996\u5b57\u7b26\u6620\u5c04\u8bed\u8a00\r\n  if (!target) return null; // \u5982\u679c\u6ca1\u6709\u5339\u914d\u5230\u5bf9\u5e94\u8bed\u8a00\uff0c\u76f4\u63a5\u8fd4\u56de\r\n\r\n  const payload = {\r\n    text: text.slice(1),\r\n    source_lang: 'auto',\r\n    target_lang: target\r\n  };\r\n\r\n  try {\r\n    const response = await $http({\r\n      url: `https://api.deeplx.org/${$deeplx_key}/translate`,\r\n      method: 'POST',\r\n      header: { 'Content-Type': 'application/json' },\r\n      body: payload,\r\n    });\r\n\r\n    if (response.response.statusCode !== 200) {\r\n      return '\u8bf7\u6c42\u5931\u8d25';\r\n    }\r\n\r\n    return JSON.parse(response.data).data;\r\n  } catch (error) {\r\n    $log(error);\r\n    return null;\r\n  }\r\n}\r\n```\r\n### Deeplx\u4e2d\u82f1\u81ea\u52a8\u7ffb\u8bd1\r\n```js\r\n// author: \u53d9\u767d\r\n// date: 2024-09-28\r\n// name: Deeplx\u4e2d\u5916\u4e92\u8bd1.js\r\n// \u6ce8\u610f: \u9700\u6dfb\u52a0\u53d8\u91cfdeeplx_key\r\n// \u4f7f\u7528\uff1a\u8f93\u5165\u4e2d\u6587\u81ea\u52a8\u7ffb\u8bd1\u6210\u82f1\u6587\uff0c\u8f93\u5165\u975e\u4e2d\u6587\u81ea\u52a8\u7ffb\u8bd1\u6210\u4e2d\u6587\r\n\r\nasync function output() {\r\n  const text = $searchText || $pasteboardContent || '\u6d4b\u8bd5\u6587\u672c';\r\n  if (!text) return '\u8bf7\u8f93\u5165\u8981\u7ffb\u8bd1\u7684\u6587\u672c'; // \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a\r\n\r\n\r\n  let target = await detectLang(text); // \u81ea\u52a8\u68c0\u6d4b\u8bed\u8a00\u5e76\u7ffb\u8bd1\r\n  let translatedText = await translate(text, target); // \u7ffb\u8bd1\u6587\u672c\r\n  return translatedText;\r\n  \r\n}\r\n\r\nasync function detectLang(text) {\r\n  try {\r\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=auto&dt=t&q=${encodeURIComponent(text)}`;\r\n\t\t// \u7b2c\u4e00\u6b21\u8c03\u7528 googleTranslate \u51fd\u6570\uff0c\u68c0\u6d4b\u5e76\u7ffb\u8bd1\u6587\u672c\r\n    const resp = await $http({\r\n      url,\r\n      header: {'Content-Type': 'application/json'}\r\n      });\r\n\r\n    if (resp.response.statusCode !== 200) {\r\n      return '\u7ffb\u8bd1\u5931\u8d25';\r\n    }\r\n\r\n    const jsonDict = JSON.parse(resp.data);\r\n    const detectedLang = jsonDict[2]; // \u8fd9\u4e2a\u5b57\u6bb5\u5305\u542b\u68c0\u6d4b\u5230\u7684\u6e90\u8bed\u8a00\r\n\r\n    // \u6839\u636e\u68c0\u6d4b\u5230\u7684\u6e90\u8bed\u8a00\u51b3\u5b9a\u76ee\u6807\u8bed\u8a00\r\n    let targetLang = detectedLang === 'zh-CN' ? 'EN' : 'ZH';\r\n    return targetLang;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n}\r\n\r\nasync function translate(text, target) {\r\n  const payload = {\r\n    text: text,\r\n    source_lang: 'auto',\r\n    target_lang: target\r\n  };\r\n\r\n  try {\r\n    const response = await $http({\r\n      url: `https://api.deeplx.org/${$deeplx_key}/translate`,\r\n      method: 'POST',\r\n      header: { 'Content-Type': 'application/json' },\r\n      body: payload,\r\n    });\r\n\r\n    if (response.response.statusCode !== 200) {\r\n      return '\u8bf7\u6c42\u5931\u8d25';\r\n    }\r\n    $log(response.data);\r\n    return JSON.parse(response.data).data;\r\n  } catch (error) {\r\n    $log(error);\r\n    return null;\r\n  }\r\n}\r\n```\r\n## \u6bcf\u65e5\u6cb9\u4ef7\r\n```js\r\n// name: \u6bcf\u65e5\u6cb9\u4ef7.js\r\n// data: 2024-10-18\r\n// author: \u53d9\u767d\r\n// desc: \u81ea\u884c\u8bbe\u7f6e\u4f60\u9700\u8981\u7684\u7701\u4efd\r\n\r\nasync function output() {\r\n\t// \u7701\u4efd\u540d\u81ea\u884c\u66ff\u6362\r\n\treturn await getOilPrice('\u5e7f\u4e1c\u7701');\r\n}\r\n\r\nasync function getOilPrice(regionName) {\r\n\tconst url = 'https://v2.api-m.com/api/oilPrice'\r\n\tconst {data} = await $http({url: url});\r\n\tconst jsonData = JSON.parse(data);\r\n\tconst region = jsonData.data.filter(item => item.regionName === regionName)[0];\r\n\tconst prices = [\r\n  `92\u6c7d\u6cb9: ${region.n92}\u5143`,\r\n  `95\u6c7d\u6cb9: ${region.n95}\u5143`,\r\n  `98\u6c7d\u6cb9: ${region.n98}\u5143`,\r\n  `0\u53f7\u67f4\u6cb9: ${region.n0}\u5143`\r\n];\r\n  return prices;\r\n}\r\n```\r\n## \u6c47\u7387\r\n```js\r\n// author: \u53d9\u767d\r\n// name: \u6c47\u7387.js\r\n// data: 2024-09-26\r\n// \u4f7f\u7528: \u4e0d\u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u6570\u5b57\uff0c\u76f4\u63a5\u70b9\u51fb\u6309\u94ae\uff0c\u5219\u9ed8\u8ba4\u8f6c\u6362\u4e3a 1 \u57fa\u51c6\u8d27\u5e01 \u5151 \u5176\u4ed6\u8d27\u5e01\u6c47\u7387\u3002", "top": 0, "createdAt": 1730111983, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-10-28", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/Rime-ji-suan-qi-lua-shi-yong.html", "labels": ["\u4ed3\u8f93\u5165\u6cd5", "Rime"], "postTitle": "Rime\u8ba1\u7b97\u5668lua\u4f7f\u7528", "postUrl": "post/Rime-ji-suan-qi-lua-shi-yong.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/3", "commentNum": 0, "wordCount": 1391, "description": "## 1. \u51c6\u5907\u6587\u4ef6\r\n\u5c06 `calculator_translator.lua` \u6587\u4ef6\u653e\u5165 Rime \u76ee\u5f55\u4e0b\u7684 `lua/` \u6587\u4ef6\u5939\u4e2d\u3002", "top": 0, "createdAt": 1730555495, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-11-02", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/cang-shu-ru-fa-pei-zhi-chang-an.html", "labels": ["\u4ed3\u8f93\u5165\u6cd5", "Rime"], "postTitle": "\u4ed3\u8f93\u5165\u6cd5\u914d\u7f6e\u957f\u6309", "postUrl": "post/cang-shu-ru-fa-pei-zhi-chang-an.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/4", "commentNum": 0, "wordCount": 827, "description": "\u5728\u4f7f\u7528\u8f93\u5165\u6cd5\u65f6\uff0c\u6709\u65f6\u60f3\u5feb\u901f\u53d1\u9001\u4f8b\u5982\u624b\u673a\u53f7\uff0c\u5730\u5740\uff0c\u90ae\u7bb1\u7b49\u4fe1\u606f\uff0c\u6216\u901a\u8fc7Rime\u7684lua\u811a\u672c\u5feb\u901f\u8f93\u5165\u65e5\u671f\u7b49\u3002", "top": 0, "createdAt": 1730699518, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-11-04", "dateLabelColor": "#bc4c00"}, "P5": {"htmlDir": "docs/post/xie-yuan-guo-cheng-zhong-de-yi-xie-bi-ji.html", "labels": ["\u4e66\u6e90", "\u7b14\u8bb0"], "postTitle": "\u5199\u6e90\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u7b14\u8bb0", "postUrl": "post/xie-yuan-guo-cheng-zhong-de-yi-xie-bi-ji.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/5", "commentNum": 0, "wordCount": 2035, "description": "\u6b64\u4e66\u6e90\u6307\u7684\u662fios\u5e73\u53f0\u7684[\u7528\u5fc3\u8bfb\u4e66](https://apps.apple.com/cn/app/%E7%94%A8%E5%BF%83%E8%AF%BB%E4%B9%A6/id1569793141)\u7684\u4e66\u6e90\uff0c\u539f\u540d\u4e3a\u6781\u7b80\u9605\u8bfb\u3002", "top": 0, "createdAt": 1730728465, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-11-04", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/cang-shu-ru-fa-jian-pan-pi-fu.html", "labels": ["\u4ed3\u8f93\u5165\u6cd5", "\u952e\u76d8\u76ae\u80a4"], "postTitle": "\u4ed3\u8f93\u5165\u6cd5\u952e\u76d8\u76ae\u80a4", "postUrl": "post/cang-shu-ru-fa-jian-pan-pi-fu.html", "postSourceUrl": "https://github.com/xubai-owo/xubai-owo.github.io/issues/6", "commentNum": 6, "wordCount": 2890, "description": ">[!Important]\n>\u5199\u5728\u524d\u9762\uff1a\u56fe\u7247\u7d20\u6750\u7248\u6743\u5f52\u68ee\u6797\u96c6\u6240\u6709\u3002", "top": 0, "createdAt": 1732702142, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/articletoc.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2024-11-27", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"Rime": "#006B75", "test": "#c2e0c6", "\u4e66\u6e90": "#FC6297", "\u4ed3\u8f93\u5165\u6cd5": "#0e8a16", "\u7b14\u8bb0": "#0F3977", "\u952e\u76d8\u76ae\u80a4": "#fbca04"}, "displayTitle": "Xubai's Blog", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://xubai-owo.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}