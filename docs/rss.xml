<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Xubai's Blog</title><link>https://xubai-owo.github.io</link><description>记录一些日常的折腾</description><copyright>Xubai's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://xubai-owo.github.io</link></image><lastBuildDate>Mon, 04 Nov 2024 05:52:22 +0000</lastBuildDate><managingEditor>Xubai's Blog</managingEditor><ttl>60</ttl><webMaster>Xubai's Blog</webMaster><item><title>仓输入法配置长按</title><link>https://xubai-owo.github.io/post/cang-shu-ru-fa-pei-zhi-chang-an.html</link><description>在使用输入法时，有时想快速发送例如手机号，地址，邮箱等信息，或通过Rime的lua脚本快速输入日期等。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/cang-shu-ru-fa-pei-zhi-chang-an.html</guid><pubDate>Mon, 04 Nov 2024 05:51:58 +0000</pubDate></item><item><title>Rime计算器lua使用</title><link>https://xubai-owo.github.io/post/Rime-ji-suan-qi-lua-shi-yong.html</link><description>## 1. 准备文件&#13;
将 `calculator_translator.lua` 文件放入 Rime 目录下的 `lua/` 文件夹中。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/Rime-ji-suan-qi-lua-shi-yong.html</guid><pubDate>Sat, 02 Nov 2024 13:51:35 +0000</pubDate></item><item><title>仓输入法(Hamster) 自用脚本</title><link>https://xubai-owo.github.io/post/cang-shu-ru-fa-%28Hamster%29%20-zi-yong-jiao-ben.html</link><description># 仓输入法(Hamster) 自用脚本&#13;
## DeepSeek&#13;
&gt; [!TIP]&#13;
&gt; 请在脚本中的变量功能中添加 deepseek_key 变量，值为 DeepSeek 的 API Key&#13;
```javascript&#13;
// author: 叙白&#13;
// date: 2024-10-09&#13;
// name: DeepSeek.js&#13;
// 注意：请在脚本中的变量功能中添加 deepseek_key 变量，值为 DeepSeek 的 API Key&#13;
// 如果您使用转发平台的 API ，则值为转发平台的 API Key, 并且修改BASE_URL&#13;
// 此脚本仅兼容openai格式(openai, deepseek, kimi以及更多兼容openai格式的都可使用，温度需要根据各家ai自行调整)&#13;
&#13;
// 依次为base_url, 默认模型，默认温度，不懂请勿修改&#13;
const BASE_URL = 'https://api.deepseek.com/v1/chat/completions';&#13;
const DEFAULT_MODEL = 'deepseek-chat';&#13;
&#13;
// 不同任务类型的推荐温度值：代码生成/数学解题 0.0, 数据抽取/分析 1.0, 通用对话 1.3, 翻译 1.3, 创意类写作/诗歌创作 1.5&#13;
const DEFAULT_TEMPERATURE = 1.3;&#13;
&#13;
async function deepseekDemo(question = '你好', options = {}) {&#13;
  const {&#13;
    model = DEFAULT_MODEL,&#13;
    temperature = DEFAULT_TEMPERATURE,&#13;
    isShortAnswer = !question.endsWith('-')  // 默认简短回答&#13;
  } = options;&#13;
&#13;
  // 可自定义systemPrompt，在你的问题结尾后加-号，会自动帮你转短问&#13;
  const systemPrompt = `你是一位AI助手，能够回答的专业以及准确${isShortAnswer ? '，现在请尽量用一句话回答我的问题' : ''}`;&#13;
&#13;
  const messages = [&#13;
    { role: 'system', content: systemPrompt },&#13;
    { role: 'user', content: question }&#13;
  ];&#13;
&#13;
  try {&#13;
    const resp = await $http({&#13;
      url: BASE_URL,&#13;
      method: 'post',&#13;
      header: {&#13;
        'Content-Type': 'application/json',&#13;
        Authorization: `Bearer ${$deepseek_key}`,&#13;
      },&#13;
      body: { messages, model, temperature },&#13;
      timeout: 30,&#13;
    });&#13;
&#13;
    const statusCode = resp.response.statusCode;&#13;
    if (statusCode !== 200) {&#13;
      throw new Error(`API请求失败: HTTP状态码 ${statusCode}`);&#13;
    }&#13;
&#13;
    const parsedData = JSON.parse(resp.data);&#13;
    if (!parsedData.choices || parsedData.choices.length === 0) {&#13;
      throw new Error('API返回数据格式错误: 没有找到有效的回复');&#13;
    }&#13;
&#13;
    return parsedData.choices[0].message?.content || '';&#13;
  } catch (error) {&#13;
    let errorMessage = '未知错误';&#13;
    if (error instanceof SyntaxError) {&#13;
      errorMessage = 'API返回的数据无法解析为JSON';&#13;
    } else if (error.message) {&#13;
      errorMessage = error.message;&#13;
    }&#13;
    $log(`DeepSeek API 错误: ${errorMessage}`);&#13;
    if (error.response) {&#13;
      $log(`响应详情: ${JSON.stringify(error.response)}`);&#13;
    }&#13;
    return `抱歉，发生了错误: ${errorMessage}`;&#13;
  }&#13;
}&#13;
&#13;
async function output() {&#13;
  const question = $searchText || $pasteboardContent || '你好';&#13;
  return await deepseekDemo(question);&#13;
}&#13;
```&#13;
## Gemini&#13;
&gt; [!TIP]&#13;
&gt; 请在脚本中的变量功能中添加 gemini_key 变量，值为 Gemini 的 API Key&#13;
```js&#13;
// author: 叙白&#13;
// date: 2024-10-03&#13;
// name: Gemini.js&#13;
// 注意：请在脚本中的变量功能中添加 gemini_key 变量，值为 Gemini 的 API Key&#13;
&#13;
const BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models';&#13;
const DEFAULT_MODEL = 'gemini-1.5-flash';&#13;
&#13;
async function geminiDemo(question = '你好', options = {}) {&#13;
  const {&#13;
    model = DEFAULT_MODEL,&#13;
    isShortAnswer = question.endsWith('-')&#13;
  } = options;&#13;
&#13;
  const systemPrompt = `你是一位AI助手，能够回答的专业以及准确${isShortAnswer ? '，现在请尽量用一句话回答我的问题' : ''}`;&#13;
&#13;
  const url = `${BASE_URL}/${model}:generateContent?key=${$gemini_key}`;&#13;
  const body = {&#13;
    'system_instruction': {&#13;
      'parts': {&#13;
        'text': systemPrompt&#13;
      }&#13;
    },&#13;
    'contents': {&#13;
      'parts': {&#13;
        'text': question&#13;
      }&#13;
    }&#13;
  };&#13;
&#13;
  try {&#13;
    const resp = await $http({&#13;
      url,&#13;
      method: 'post',&#13;
      header: {&#13;
        'Content-Type': 'application/json'&#13;
      },&#13;
      body: body,&#13;
      timeout: 30,&#13;
    });&#13;
&#13;
    const statusCode = resp.response.statusCode;&#13;
    if (statusCode !== 200) {&#13;
      throw new Error(`API请求失败: HTTP状态码 ${statusCode}`);&#13;
    }&#13;
&#13;
    const parsedData = JSON.parse(resp.data);&#13;
    if (!parsedData.candidates || parsedData.candidates.length === 0) {&#13;
      throw new Error('API返回数据格式错误: 没有找到有效的回复');&#13;
    }&#13;
&#13;
    return parsedData.candidates[0].content.parts[0].text || '';&#13;
  } catch (error) {&#13;
    let errorMessage = '未知错误';&#13;
    if (error instanceof SyntaxError) {&#13;
      errorMessage = 'API返回的数据无法解析为JSON';&#13;
    } else if (error.message) {&#13;
      errorMessage = error.message;&#13;
    }&#13;
    $log(`Gemini API 错误: ${errorMessage}`);&#13;
    if (error.response) {&#13;
      $log(`响应详情: ${JSON.stringify(error.response)}`);&#13;
    }&#13;
    return `抱歉，发生了错误: ${errorMessage}`;&#13;
  }&#13;
}&#13;
&#13;
async function output() {&#13;
  const question = $searchText || $pasteboardContent || '你好-';&#13;
  return await geminiDemo(question);&#13;
}&#13;
```&#13;
## Base64编解码&#13;
&gt; [!TIP]&#13;
&gt; E需要编码的字符串/D需要解码的字符串&#13;
```js&#13;
// author: 叙白&#13;
// name: base64编码解码.js&#13;
// date: 2024-09-25&#13;
// 使用：E需要编码的字符串/D需要解码的字符串&#13;
&#13;
function base64Encode(str) {&#13;
  // 将字符串转换为 UTF-8 编码&#13;
  const utf8Bytes = unescape(encodeURIComponent(str));&#13;
  let output = '';&#13;
  let buffer = 0;&#13;
  let bitsCollected = 0;&#13;
&#13;
  for (let byte of utf8Bytes) {&#13;
    buffer = (buffer &lt;&lt; 8) | byte.charCodeAt(0);&#13;
    bitsCollected += 8;&#13;
&#13;
    while (bitsCollected &gt;= 6) {&#13;
      bitsCollected -= 6;&#13;
      output += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='[(buffer &gt;&gt; bitsCollected) &amp; 0x3F];&#13;
    }&#13;
  }&#13;
&#13;
&#13;
  if (bitsCollected &gt; 0) {&#13;
    buffer &lt;&lt;= (6 - bitsCollected);&#13;
    output += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='[(buffer &amp; 0x3F)];&#13;
    output += '='; // 添加填充&#13;
  }&#13;
&#13;
  return output;&#13;
}&#13;
&#13;
function base64Decode(str) {&#13;
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';&#13;
  let output = '';&#13;
  let buffer = 0;&#13;
  let bitsCollected = 0;&#13;
&#13;
  for (let char of str) {&#13;
    if (char === '=') break;&#13;
    const charIndex = chars.indexOf(char);&#13;
    if (charIndex === -1) continue; // 忽略非法字符&#13;
&#13;
    buffer = (buffer &lt;&lt; 6) | charIndex;&#13;
    bitsCollected += 6;&#13;
&#13;
    while (bitsCollected &gt;= 8) {&#13;
      bitsCollected -= 8;&#13;
      output += String.fromCharCode((buffer &gt;&gt; bitsCollected) &amp; 0xFF);&#13;
    }&#13;
  }&#13;
&#13;
  // 将解码后的字节转换回 UTF-8&#13;
  return decodeURIComponent(escape(output));&#13;
}&#13;
&#13;
async function output() {&#13;
  const text = $searchText || $pasteboardContent&#13;
  if (!text) {&#13;
    return '请输入内容!';&#13;
  }&#13;
  if (text[0] === 'E') {&#13;
    return base64Encode(text.slice(1));;&#13;
  } else if (text[0] === 'D') {&#13;
    return base64Decode(text.slice(1));&#13;
  } else {&#13;
    return '请输入正确的指令';&#13;
  }&#13;
}&#13;
```&#13;
## Deeplx&#13;
&gt; [!TIP]&#13;
&gt; 需添加变量deeplx_key&#13;
```js&#13;
// author: 叙白&#13;
// date: 2024-09-25&#13;
// name: Deeplx.js&#13;
// 注意: 需添加变量deeplx_key&#13;
// 使用： 要翻译成英文或中文，在翻译文本前加“中/英”， 例： 中我要回家，将会翻译成英文&#13;
&#13;
async function output() {&#13;
  const text = $searchText || $pasteboardContent;&#13;
  if (!text) return null; // 检查输入是否为空&#13;
&#13;
  const langMap = {&#13;
    '中': 'ZH',&#13;
    '英': 'EN'&#13;
  };&#13;
&#13;
  const target = langMap[text[0]]; // 根据首字符映射语言&#13;
  if (!target) return null; // 如果没有匹配到对应语言，直接返回&#13;
&#13;
  const payload = {&#13;
    text: text.slice(1),&#13;
    source_lang: 'auto',&#13;
    target_lang: target&#13;
  };&#13;
&#13;
  try {&#13;
    const response = await $http({&#13;
      url: `https://api.deeplx.org/${$deeplx_key}/translate`,&#13;
      method: 'POST',&#13;
      header: { 'Content-Type': 'application/json' },&#13;
      body: payload,&#13;
    });&#13;
&#13;
    if (response.response.statusCode !== 200) {&#13;
      return '请求失败';&#13;
    }&#13;
&#13;
    return JSON.parse(response.data).data;&#13;
  } catch (error) {&#13;
    $log(error);&#13;
    return null;&#13;
  }&#13;
}&#13;
```&#13;
### Deeplx中英自动翻译&#13;
```js&#13;
// author: 叙白&#13;
// date: 2024-09-28&#13;
// name: Deeplx中外互译.js&#13;
// 注意: 需添加变量deeplx_key&#13;
// 使用：输入中文自动翻译成英文，输入非中文自动翻译成中文&#13;
&#13;
async function output() {&#13;
  const text = $searchText || $pasteboardContent || '测试文本';&#13;
  if (!text) return '请输入要翻译的文本'; // 检查输入是否为空&#13;
&#13;
&#13;
  let target = await detectLang(text); // 自动检测语言并翻译&#13;
  let translatedText = await translate(text, target); // 翻译文本&#13;
  return translatedText;&#13;
  &#13;
}&#13;
&#13;
async function detectLang(text) {&#13;
  try {&#13;
    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&amp;sl=auto&amp;tl=auto&amp;dt=t&amp;q=${encodeURIComponent(text)}`;&#13;
		// 第一次调用 googleTranslate 函数，检测并翻译文本&#13;
    const resp = await $http({&#13;
      url,&#13;
      header: {'Content-Type': 'application/json'}&#13;
      });&#13;
&#13;
    if (resp.response.statusCode !== 200) {&#13;
      return '翻译失败';&#13;
    }&#13;
&#13;
    const jsonDict = JSON.parse(resp.data);&#13;
    const detectedLang = jsonDict[2]; // 这个字段包含检测到的源语言&#13;
&#13;
    // 根据检测到的源语言决定目标语言&#13;
    let targetLang = detectedLang === 'zh-CN' ? 'EN' : 'ZH';&#13;
    return targetLang;&#13;
  } catch (error) {&#13;
    throw new Error(error);&#13;
  }&#13;
}&#13;
&#13;
async function translate(text, target) {&#13;
  const payload = {&#13;
    text: text,&#13;
    source_lang: 'auto',&#13;
    target_lang: target&#13;
  };&#13;
&#13;
  try {&#13;
    const response = await $http({&#13;
      url: `https://api.deeplx.org/${$deeplx_key}/translate`,&#13;
      method: 'POST',&#13;
      header: { 'Content-Type': 'application/json' },&#13;
      body: payload,&#13;
    });&#13;
&#13;
    if (response.response.statusCode !== 200) {&#13;
      return '请求失败';&#13;
    }&#13;
    $log(response.data);&#13;
    return JSON.parse(response.data).data;&#13;
  } catch (error) {&#13;
    $log(error);&#13;
    return null;&#13;
  }&#13;
}&#13;
```&#13;
## 每日油价&#13;
```js&#13;
// name: 每日油价.js&#13;
// data: 2024-10-18&#13;
// author: 叙白&#13;
// desc: 自行设置你需要的省份&#13;
&#13;
async function output() {&#13;
	// 省份名自行替换&#13;
	return await getOilPrice('广东省');&#13;
}&#13;
&#13;
async function getOilPrice(regionName) {&#13;
	const url = 'https://v2.api-m.com/api/oilPrice'&#13;
	const {data} = await $http({url: url});&#13;
	const jsonData = JSON.parse(data);&#13;
	const region = jsonData.data.filter(item =&gt; item.regionName === regionName)[0];&#13;
	const prices = [&#13;
  `92汽油: ${region.n92}元`,&#13;
  `95汽油: ${region.n95}元`,&#13;
  `98汽油: ${region.n98}元`,&#13;
  `0号柴油: ${region.n0}元`&#13;
];&#13;
  return prices;&#13;
}&#13;
```&#13;
## 汇率&#13;
```js&#13;
// author: 叙白&#13;
// name: 汇率.js&#13;
// data: 2024-09-26&#13;
// 使用: 不在输入框中输入数字，直接点击按钮，则默认转换为 1 基准货币 兑 其他货币汇率。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/cang-shu-ru-fa-%28Hamster%29%20-zi-yong-jiao-ben.html</guid><pubDate>Mon, 28 Oct 2024 10:39:43 +0000</pubDate></item><item><title>Hello World!</title><link>https://xubai-owo.github.io/post/Hello%20World%21.html</link><description># 第一篇文章&#13;
测试一下。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/Hello%20World%21.html</guid><pubDate>Mon, 28 Oct 2024 10:33:28 +0000</pubDate></item></channel></rss>