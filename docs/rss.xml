<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://xubai-owo.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://xubai-owo.github.io</link></image><lastBuildDate>Mon, 28 Oct 2024 10:40:09 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>仓输入法(Hamster) 自用脚本</title><link>https://xubai-owo.github.io/post/cang-shu-ru-fa-%28Hamster%29%20-zi-yong-jiao-ben.html</link><description># 仓输入法(Hamster) 自用脚本&#13;
## DeepSeek&#13;
```javascript&#13;
// author: 叙白&#13;
// date: 2024-10-09&#13;
// name: DeepSeek.js&#13;
// 注意：请在脚本中的变量功能中添加 deepseek_key 变量，值为 DeepSeek 的 API Key&#13;
// 如果您使用转发平台的 API ，则值为转发平台的 API Key, 并且修改BASE_URL&#13;
// 此脚本仅兼容openai格式(openai, deepseek, kimi以及更多兼容openai格式的都可使用，温度需要根据各家ai自行调整)&#13;
&#13;
// 依次为base_url, 默认模型，默认温度，不懂请勿修改&#13;
const BASE_URL = 'https://api.deepseek.com/v1/chat/completions';&#13;
const DEFAULT_MODEL = 'deepseek-chat';&#13;
&#13;
// 不同任务类型的推荐温度值：代码生成/数学解题 0.0, 数据抽取/分析 1.0, 通用对话 1.3, 翻译 1.3, 创意类写作/诗歌创作 1.5&#13;
const DEFAULT_TEMPERATURE = 1.3;&#13;
&#13;
async function deepseekDemo(question = '你好', options = {}) {&#13;
  const {&#13;
    model = DEFAULT_MODEL,&#13;
    temperature = DEFAULT_TEMPERATURE,&#13;
    isShortAnswer = !question.endsWith('-')  // 默认简短回答&#13;
  } = options;&#13;
&#13;
  // 可自定义systemPrompt，在你的问题结尾后加-号，会自动帮你转短问&#13;
  const systemPrompt = `你是一位AI助手，能够回答的专业以及准确${isShortAnswer ? '，现在请尽量用一句话回答我的问题' : ''}`;&#13;
&#13;
  const messages = [&#13;
    { role: 'system', content: systemPrompt },&#13;
    { role: 'user', content: question }&#13;
  ];&#13;
&#13;
  try {&#13;
    const resp = await $http({&#13;
      url: BASE_URL,&#13;
      method: 'post',&#13;
      header: {&#13;
        'Content-Type': 'application/json',&#13;
        Authorization: `Bearer ${$deepseek_key}`,&#13;
      },&#13;
      body: { messages, model, temperature },&#13;
      timeout: 30,&#13;
    });&#13;
&#13;
    const statusCode = resp.response.statusCode;&#13;
    if (statusCode !== 200) {&#13;
      throw new Error(`API请求失败: HTTP状态码 ${statusCode}`);&#13;
    }&#13;
&#13;
    const parsedData = JSON.parse(resp.data);&#13;
    if (!parsedData.choices || parsedData.choices.length === 0) {&#13;
      throw new Error('API返回数据格式错误: 没有找到有效的回复');&#13;
    }&#13;
&#13;
    return parsedData.choices[0].message?.content || '';&#13;
  } catch (error) {&#13;
    let errorMessage = '未知错误';&#13;
    if (error instanceof SyntaxError) {&#13;
      errorMessage = 'API返回的数据无法解析为JSON';&#13;
    } else if (error.message) {&#13;
      errorMessage = error.message;&#13;
    }&#13;
    $log(`DeepSeek API 错误: ${errorMessage}`);&#13;
    if (error.response) {&#13;
      $log(`响应详情: ${JSON.stringify(error.response)}`);&#13;
    }&#13;
    return `抱歉，发生了错误: ${errorMessage}`;&#13;
  }&#13;
}&#13;
&#13;
async function output() {&#13;
  const question = $searchText || $pasteboardContent || '你好';&#13;
  return await deepseekDemo(question);&#13;
}&#13;
```&#13;
## Gemini&#13;
```js&#13;
// author: 叙白&#13;
// date: 2024-10-03&#13;
// name: Gemini.js&#13;
// 注意：请在脚本中的变量功能中添加 gemini_key 变量，值为 Gemini 的 API Key&#13;
&#13;
const BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models';&#13;
const DEFAULT_MODEL = 'gemini-1.5-flash';&#13;
&#13;
async function geminiDemo(question = '你好', options = {}) {&#13;
  const {&#13;
    model = DEFAULT_MODEL,&#13;
    isShortAnswer = question.endsWith('-')&#13;
  } = options;&#13;
&#13;
  const systemPrompt = `你是一位AI助手，能够回答的专业以及准确${isShortAnswer ? '，现在请尽量用一句话回答我的问题' : ''}`;&#13;
&#13;
  const url = `${BASE_URL}/${model}:generateContent?key=${$gemini_key}`;&#13;
  const body = {&#13;
    'system_instruction': {&#13;
      'parts': {&#13;
        'text': systemPrompt&#13;
      }&#13;
    },&#13;
    'contents': {&#13;
      'parts': {&#13;
        'text': question&#13;
      }&#13;
    }&#13;
  };&#13;
&#13;
  try {&#13;
    const resp = await $http({&#13;
      url,&#13;
      method: 'post',&#13;
      header: {&#13;
        'Content-Type': 'application/json'&#13;
      },&#13;
      body: body,&#13;
      timeout: 30,&#13;
    });&#13;
&#13;
    const statusCode = resp.response.statusCode;&#13;
    if (statusCode !== 200) {&#13;
      throw new Error(`API请求失败: HTTP状态码 ${statusCode}`);&#13;
    }&#13;
&#13;
    const parsedData = JSON.parse(resp.data);&#13;
    if (!parsedData.candidates || parsedData.candidates.length === 0) {&#13;
      throw new Error('API返回数据格式错误: 没有找到有效的回复');&#13;
    }&#13;
&#13;
    return parsedData.candidates[0].content.parts[0].text || '';&#13;
  } catch (error) {&#13;
    let errorMessage = '未知错误';&#13;
    if (error instanceof SyntaxError) {&#13;
      errorMessage = 'API返回的数据无法解析为JSON';&#13;
    } else if (error.message) {&#13;
      errorMessage = error.message;&#13;
    }&#13;
    $log(`Gemini API 错误: ${errorMessage}`);&#13;
    if (error.response) {&#13;
      $log(`响应详情: ${JSON.stringify(error.response)}`);&#13;
    }&#13;
    return `抱歉，发生了错误: ${errorMessage}`;&#13;
  }&#13;
}&#13;
&#13;
async function output() {&#13;
  const question = $searchText || $pasteboardContent || '你好-';&#13;
  return await geminiDemo(question);&#13;
}&#13;
```&#13;
。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/cang-shu-ru-fa-%28Hamster%29%20-zi-yong-jiao-ben.html</guid><pubDate>Mon, 28 Oct 2024 10:39:43 +0000</pubDate></item><item><title>Hello World!</title><link>https://xubai-owo.github.io/post/Hello%20World%21.html</link><description># 第一篇文章&#13;
测试一下。</description><guid isPermaLink="true">https://xubai-owo.github.io/post/Hello%20World%21.html</guid><pubDate>Mon, 28 Oct 2024 10:33:28 +0000</pubDate></item></channel></rss>